/*
 * Copyright (c) 2008 Poesys Associates. All rights reserved.
 *
 * This file is part of Poesys-DB.
 *
 * Poesys-DB is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Poesys-DB is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Poesys-DB. If not, see <http://www.gnu.org/licenses/>.
 */
package com.poesys.db.pk;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.col.BigIntegerColumnValue;
import com.poesys.db.col.IColumnValue;
import com.poesys.db.pk.json.JsonPrimaryKey;
import com.poesys.db.pk.json.SequenceJsonPrimaryKey;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

/**
 * <p>
 * Implements the single-valued primary key for a key constructed from a single
 * integer value created dynamically from a SEQUENCE or some other, similar
 * mechanism. The class represents the value with a BigInteger object, so you
 * are not limited to any specific size of integer. On the other hand, you
 * cannot guarantee that the value will fit into a Java Integer or Long value,
 * so you cannot use this value in any context that requires such a value.
 * </p>
 * <p>
 * The FactoryMethod or AbstractFactory class that creates this object should
 * use the appropriate generation technology given the specific database to
 * create the BigInteger value assigned. This precludes, for example, using the
 * Oracle NEXTVAL pseudo-column to generate the value in place; instead, the
 * factory would SELECT SEQ_NAME.NEXTVAL() FROM DUAL to get the next value from
 * the SEQ_NAME sequence. Use the IdentityPrimaryKey class to use a Sybase or
 * SQLServer identity column or a MySQL auto-increment column.
 * </p>
 * <p>
 * Note that this key class returns the BigInteger key as a value because there
 * is no other way to get that value. Other classes require having the value
 * first, this one comes from a value generator.
 * </p>
 *
 * @author Robert J. Muller
 * @see IdentityPrimaryKey
 * @see PrimaryKeyFactory
 */
public class SequencePrimaryKey extends AbstractSingleValuedPrimaryKey {
  /**
   * Serial version UID for Serializable class
   */
  private static final long serialVersionUID = -3407239974828190650L;
  /** The integer key value generated by the sequence generator */
  private BigInteger value;

  /**
   * Create a sequence primary key value with a BigInteger value.
   *
   * @param name      the name of the primary key column
   * @param value     the value of the primary key
   * @param className the name of the IDbDto class of the object that the
   *                  primary key identifies
   * @throws InvalidParametersException when the name or value is null
   */
  public SequencePrimaryKey(String name, BigInteger value, String className) throws
    InvalidParametersException {
    super(new ArrayList<>(), className);
    list.add(new BigIntegerColumnValue(name, value));
    this.value = value;
  }

  /**
   * Create a SequencePrimaryKey object.
   *
   * @param list      a thread-safe list of column values
   * @param value     the sequence value as an integer
   * @param className the name of the IDbDto class of the object that the
   *                  primary key identifies
   */
  public SequencePrimaryKey(List<IColumnValue> list, BigInteger value, String className) {
    super(list, className);
    this.value = value;
  }

  /**
   * Create a SequencePrimaryKey object from a messaging key object.
   *
   * @param key       the messaging key
   * @param className the name of the IDbDto class of the object that the
   *                  primary key identifies
   */
  public SequencePrimaryKey(com.poesys.ms.pk.SequencePrimaryKey key, String className) {
    // Call the default constructor in the superclass with no list.
    super(className);
    // Create a new list and populate it from the DTO.
    list = new ArrayList<>();
    list.add(new BigIntegerColumnValue(key.getName(), key.getValue()));
  }

  /*
   * (non-Javadoc)
   *
   * @see com.poesys.db.pk.IPrimaryKey#getValueList()
   */
  public String getValueList() {
    IColumnValue col = list.get(0);
    StringBuilder str = new StringBuilder();
    str.append("(");
    str.append(col.getName());
    str.append("=");
    str.append(col.toString());
    str.append(")");

    return str.toString();
  }

  /**
   * Get the sequence as a big integer.
   *
   * @return the sequence number
   */
  public BigInteger getValue() {
    return value;
  }

  /*
   * (non-Javadoc)
   *
   * @see com.poesys.db.pk.IPrimaryKey#copy()
   */
  public IPrimaryKey copy() {
    return new SequencePrimaryKey(super.copyList(), value, className);
  }

  @SuppressWarnings("unchecked")
  @Override
  public com.poesys.ms.pk.IPrimaryKey getMessageObject() {
    // Extract column from list and create DTO.
    IColumnValue col = list.get(0);
    com.poesys.ms.col.IColumnValue<BigInteger> msgCol =
      (com.poesys.ms.col.IColumnValue<BigInteger>)col.getMessageObject();
    return new com.poesys.ms.pk.SequencePrimaryKey(msgCol.getName(), msgCol.getValue(), className);
  }

  @Override
  public JsonPrimaryKey getJsonPrimaryKey() {
    return new SequenceJsonPrimaryKey(className, getJsonColumnValueList());

  }
}
